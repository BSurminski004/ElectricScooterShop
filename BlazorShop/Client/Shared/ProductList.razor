@using BlazorShop.Shared.Entities;
@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-md-center">
            @foreach (var product in ProductService.Products)
            {
                <div class="col-md-4 mb-4">
                    <div class="card media-img-wrapper">
                        <a href="/product/@product.Id">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img class="card-img-top media-img" src="@product.ImageUrl" alt="@product.Title" />
                            }
                            else if (product.Images.Count > 0)
                            {
                                <img class="card-img-top media-img" src="@product.Images[0].Data" alt="@product.Title" />
                            }
                        </a>
                        <div class="card-body">
                            <h5 class="card-title">@product.Title</h5>
                            <p class="card-text">Cena: @GetPriceText(product) ZŁ</p>
                            <a href="/product/@product.Id" class="btn btn-primary">Kup teraz</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    for (var i = 1; i <= ProductService.PageCount; i++)
    {
        <a class="btn
                 @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info")
                 page-selection"
           href="/search/@ProductService.LastSearchText/@i">@i</a>
    }
}

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"{variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Od {minPrice}";
    }
}



    @*
        <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                        }
                        else if (product.Images.Count > 0)
                        {
                            <img class="media-img" src="@product.Images[0].Data" alt="@product.Title" />
                        }
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPriceText(product)
                    </h5>
                </div>
            </li>
        }
    </ul>
    *@
